name: Release

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0, v1.2.3, etc.

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        django-version: ['3.2', '4.2', '5.0']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install Django==${{ matrix.django-version }}
        pip install -r requirements.txt
        pip install pytest pytest-django
    
    - name: Install package
      run: |
        pip install -e .
    
    - name: Run tests
      run: |
        pytest

  build-and-publish:
    runs-on: ubuntu-latest
    needs: test
    environment: release
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Extract version from tag
      id: get_version
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    
    - name: Update version in pyproject.toml
      run: |
        sed -i 's/version = "[^"]*"/version = "${{ steps.get_version.outputs.VERSION }}"/' pyproject.toml
    
    - name: Build package
      run: |
        python -m build
    
    - name: Check package
      run: |
        twine check dist/*
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        skip-existing: true
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.VERSION, '-') }}

  update-changelog:
    runs-on: ubuntu-latest
    needs: build-and-publish
    
    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Update CHANGELOG
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0)
        
        # Get the previous tag
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 $LATEST_TAG^)
        
        # Generate changelog entry
        echo "" >> CHANGELOG.md.new
        echo "## [$LATEST_TAG] - $(date +%Y-%m-%d)" >> CHANGELOG.md.new
        echo "" >> CHANGELOG.md.new
        
        # Get commits between tags
        git log --pretty=format:"- %s" $PREVIOUS_TAG..$LATEST_TAG >> CHANGELOG.md.new
        
        # Prepend to existing changelog
        if [ -f CHANGELOG.md ]; then
          echo "" >> CHANGELOG.md.new
          cat CHANGELOG.md >> CHANGELOG.md.new
        fi
        
        mv CHANGELOG.md.new CHANGELOG.md
    
    - name: Commit changelog
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add CHANGELOG.md
        git diff --staged --quiet || git commit -m "Update CHANGELOG for $GITHUB_REF_NAME"
        git push 